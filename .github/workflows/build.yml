name: Build

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      lb_version: ${{ steps.version.outputs.LB_VERSION }}
      jar_name: ${{ steps.prep.outputs.jar_name }}

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Java 8 (AdoptOpenJDK)
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: 8
          cache: "gradle"

      - name: Read version from src/main/resources/version.txt
        id: version
        run: |
          LB_VERSION=$(cat src/main/resources/version.txt | tr -d ' \n\r')
          echo "LB_VERSION=$LB_VERSION" >> $GITHUB_OUTPUT
          echo "LB_VERSION=$LB_VERSION" >> $GITHUB_ENV

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Delete old build JARs
        run: rm -f ./build/libs/*.jar || true

      - name: Build (no tests, parallel, daemon)
        run: ./gradlew build --stacktrace

      - name: Prepare artifact and get jar name
        id: prep
        run: |
          cd build/libs
          JAR=$(find . -name "*.jar" | grep "liquidbounce" | head -n1)
          if [ -z "$JAR" ]; then
            echo "No .jar file found! Build failed."
            exit 1
          fi
          MINECRAFT_VERSION="1.8.9"
          ARTIFACT_NAME="liquidbounce-${{ env.LB_VERSION }}-mc$MINECRAFT_VERSION.jar"
          mkdir -p ../../artifacts
          cp "$JAR" "../../artifacts/$ARTIFACT_NAME"
          echo "jar_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Upload all artifacts
        uses: actions/upload-artifact@v4
        with:
          name: LiquidBounce-Artifacts
          path: artifacts
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ needs.build.outputs.lb_version != '' }}

    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh -y

      - name: Setup git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: LiquidBounce-Artifacts
          path: ./artifacts

      - name: Check artifacts exist
        run: |
          if [ ! -d "./artifacts" ] || [ -z "$(ls -A ./artifacts)" ]; then
            echo "Artifacts directory is empty!"
            exit 1
          fi

  discord_webhook:
    needs: [build, release]
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: LiquidBounce-Artifacts
        path: ./artifacts

    - name: Upload large files to catbox.moe and send to Discord
      env:
        WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
        VERSION: ${{ needs.build.outputs.lb_version }}
      run: |
        # Ki·ªÉm tra th∆∞ m·ª•c artifacts
        if [ ! -d "./artifacts" ] || [ -z "$(ls -A ./artifacts)" ]; then
          echo "::error::Artifacts directory is empty!"
          exit 1
        fi

        # T·∫°o message
        MESSAGE="üöÄ Build LiquidBounce th√†nh c√¥ng! Phi√™n b·∫£n: $VERSION\nüìÅ C√°c file ƒë√£ build:"
        UPLOADED_FILES=""

        # X·ª≠ l√Ω t·ª´ng file
        for file in ./artifacts/*; do
          if [ -f "$file" ]; then
            FILENAME=$(basename "$file")
            FILESIZE=$(stat -c%s "$file")
            MAX_SIZE=8000000  # 8MB
            
            # File nh·ªè: g·ª≠i tr·ª±c ti·∫øp
            if [ "$FILESIZE" -le "$MAX_SIZE" ]; then
              curl -F "file=@$file" -F "content=File: $FILENAME" "$WEBHOOK_URL"
            
            # File l·ªõn: upload l√™n catbox.moe
            else
              echo "Uploading large file to catbox.moe: $FILENAME"
              
              # Upload file l√™n catbox.moe
              RESPONSE=$(curl -s -F "reqfile=@$file" "https://catbox.moe/user/api.php")
              
              # Ki·ªÉm tra response
              if [[ $RESPONSE == http* ]]; then
                DOWNLOAD_URL="$RESPONSE"
                UPLOADED_FILES+="\n- [$FILENAME]($DOWNLOAD_URL) ($((FILESIZE/1000000)) MB)"
              else
                echo "::error::Upload failed for $FILENAME. Response: $RESPONSE"
                UPLOADED_FILES+="\n- $FILENAME (Upload failed)"
              fi
            fi
          fi
        done

        # G·ª≠i message ch·ª©a link download n·∫øu c√≥ file l·ªõn
        if [ -n "$UPLOADED_FILES" ]; then
          MESSAGE+="\n\nüì¶ C√°c file l·ªõn ƒë√£ ƒë∆∞·ª£c upload l√™n catbox.moe:"
          MESSAGE+="$UPLOADED_FILES"
          
          curl -H "Content-Type: application/json" \
               -d "{\"content\":\"$MESSAGE\"}" \
               "$WEBHOOK_URL"
        fi